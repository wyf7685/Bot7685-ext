name: Build Wheels

on:
  workflow_dispatch:
  # push:
  #   branches:
  #     - master
  # pull_request:
  #   branches:
  #     - master
  release:
    types:
      - published

jobs:
  check_version:
    runs-on: ubuntu-latest
    name: Check version matches tag
    if: github.event_name == 'release'
    steps:
      - uses: actions/checkout@v4

      - name: Setup uv
        uses: astral-sh/setup-uv@v6

      - name: Get Version
        id: version
        run: |
          echo "VERSION=$(uv version --short)" >> $GITHUB_OUTPUT
          echo "TAG_VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT
          echo "TAG_NAME=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

      - name: Check Version
        if: steps.version.outputs.VERSION != steps.version.outputs.TAG_VERSION
        run: exit 1

  build_linux:
    name: Build wheel for ${{ matrix.python }}-${{ matrix.platform }}_${{ matrix.archs }}
    runs-on: ubuntu-22.04${{ matrix.archs == 'aarch64' && '-arm' || '' }}
    strategy:
      fail-fast: false
      matrix:
        python: [cp313, cp314]
        platform: [manylinux]
        archs: [x86_64]

    steps:
      - uses: actions/checkout@v5
      - name: Build wheel
        uses: pypa/cibuildwheel@v3.2.0
        env:
          CIBW_BUILD: ${{ matrix.python }}-${{ matrix.platform }}_${{ matrix.archs }}
      - uses: actions/upload-artifact@v4
        with:
          name: wheel-${{ matrix.python }}-${{ matrix.platform }}_${{ matrix.archs }}
          path: ./wheelhouse/*.whl

  build_windows:
    name: Build wheel for ${{ matrix.python }}-win_amd64
    runs-on: windows-2022
    strategy:
      fail-fast: false
      matrix:
        python: [cp313, cp314]

    steps:
      - uses: actions/checkout@v5
      - name: Build wheel
        uses: pypa/cibuildwheel@v3.2.0
        env:
          CIBW_BUILD: ${{ matrix.python }}-win_amd64
      - uses: actions/upload-artifact@v4
        with:
          name: wheel-${{ matrix.python }}-win_amd64
          path: ./wheelhouse/*.whl

  build_sdist:
    name: Build sdist
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Setup uv
        uses: astral-sh/setup-uv@v6

      - name: Build sdist
        run: uv build --sdist

      - uses: actions/upload-artifact@v4
        with:
          name: sdist
          path: ./dist/*.tar.gz

  publish:
    name: Publish to PyPI
    runs-on: ubuntu-latest
    needs: [check_version, build_linux, build_windows, build_sdist]
    if: github.event_name == 'release'
    permissions:
      id-token: write # required for OIDC trusted publisher
      contents: read

    steps:
      - name: Download all wheels
        uses: actions/download-artifact@v4
        with:
          path: dist
          pattern: wheel-*
          merge-multiple: true

      - name: Download sdist
        uses: actions/download-artifact@v4
        with:
          name: sdist
          path: dist

      - name: Install uv
        uses: astral-sh/setup-uv@v6

      - name: Publish to PyPI
        if: startsWith(github.ref, 'refs/tags/')
        run: uv publish --trusted-publishing always
